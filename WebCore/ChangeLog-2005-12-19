2005-11-18  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-07-29  David Hyatt  <hyatt@apple.com>

	(1) Fixes khtml-user-select: none to have the following additional behavior (that matches Firefox's implementation of the property as well)
	(a) If you mouse down (or click, double click, triple click) inside a "none" region, the selection should not be cleared or changed
        (b) If you drag from within a "none" region out to a selectable region, so what, no selection should be changed or started.

	(2) Adds a new value to khtml-user-select called "element" that is used for any object that should have the behavior of (a) and (b) above (but that is selectable aside from that).  This includes images, links, buttons, and so on.  html4.css is patched to add support for these objects.
	    This feature fixes the big contenteditable issue and selection is no longer cleared now when you click on these controls (or on links).  This behavior matches other browsers.

	(3) :active and :hover have been substantially reworked.
	    (a) If you mouse down on a selectable region, then the behavior is unchanged.  :hover/:active is completely frozen, and they aren't updated at all.
	    (b) If you mouse down on a non-selectable region and start moving, then the behavior has changed.  Instead of not updating at all, we mark the chain at the time the mouse goes down, and we restrict :hover/:active updates to only apply to elements that are in that chain.  This yields perfect hover/active control behavior, even when :active has been applied hierarchically.
	    (c) :hover has moved onto the node and is no longer on the renderobject (allowing them to be consistent).
	
        Reviewed by john

        * khtml/css/cssparser.cpp:
        (CSSParser::parseValue):
        * khtml/css/cssstyleselector.cpp:
        (khtml::CSSStyleSelector::canShareStyleWithElement):
        (khtml::CSSStyleSelector::checkOneSelector):
        (khtml::CSSStyleSelector::applyProperty):
        * khtml/css/html4.css:
        * khtml/khtml_part.cpp:
        (KHTMLPart::setSelection):
        (KHTMLPart::selectClosestWordFromMouseEvent):
        (KHTMLPart::handleMousePressEventTripleClick):
        (KHTMLPart::handleMousePressEventSingleClick):
        (KHTMLPart::handleMouseMoveEventSelection):
        (KHTMLPart::khtmlMouseReleaseEvent):
        * khtml/khtml_part.h:
        (KHTMLPart::mouseDownMayStartSelect):
        * khtml/khtmlview.cpp:
        (KHTMLView::viewportMouseMoveEvent):
        * khtml/rendering/render_layer.cpp:
        (RenderLayer::hitTest):
        (RenderLayer::updateHoverActiveState):
        * khtml/rendering/render_object.cpp:
        (RenderObject::RenderObject):
        (RenderObject::information):
        * khtml/rendering/render_object.h:
        (khtml::RenderObject::isRunIn):
        (khtml::RenderObject::setInline):
        (khtml::RenderObject::NodeInfo::NodeInfo):
        (khtml::RenderObject::NodeInfo::mouseMove):
        * khtml/rendering/render_style.h:
        (khtml::):
        * khtml/xml/dom_docimpl.cpp:
        (DocumentImpl::DocumentImpl):
        (DocumentImpl::~DocumentImpl):
        (DocumentImpl::prepareMouseEvent):
        (DocumentImpl::setActiveNode):
        * khtml/xml/dom_docimpl.h:
        (DOM::DocumentImpl::activeNode):
        * khtml/xml/dom_nodeimpl.cpp:
        (DOM::ContainerNodeImpl::setHovered):
        * khtml/xml/dom_nodeimpl.h:
        (DOM::NodeImpl::inActiveChain):
        (DOM::NodeImpl::hovered):
        (DOM::NodeImpl::setInActiveChain):
        (DOM::NodeImpl::setHovered):
        * kwq/KWQKHTMLPart.h:
        (KWQKHTMLPart::mouseDownMayStartSelect):
        * kwq/KWQKHTMLPart.mm:
        (KWQKHTMLPart::canMouseDownStartSelect):
        (KWQKHTMLPart::khtmlMousePressEvent):

2005-11-18  Mitz Pettel  <opendarwin.org@mitzpettel.com>

        Reviewed by Dave Harrson.
        Commited by Tim Hatcher.

        - fix http://bugzilla.opendarwin.org/show_bug.cgi?id=5629
        REGRESSION: appendChild() does not remove nodes from source
        nodelist when inserting into destination

        * khtml/rendering/render_layer.cpp:
        (khtml::ContainerNodeImpl::appendChild): Dispatch old parent's
        subtree modified event from appendChild()

2005-11-17  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-11-17  Adele Peterson  <adele@apple.com>

        Reviewed by Beth.

        - fix for <rdar://problem/4347856> Safari crash after browsing Fandango.

        When removeFormElement is getting called in a destructor, there may not be a document.
        So we don't need to worry about cleaning up the radio buttons in this case, not only to
        avoid the crash, but also because the document's destructor will clean that up.

        * khtml/html/html_formimpl.cpp:
        (DOM::HTMLFormElementImpl::removeFormElement): Added nil check for document.

=== WebCore-315.11 ===

2005-11-17  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-11-17  Beth Dakin  <bdakin@apple.com>

        Reviewed by Darin

        Fix for <rdar://problem/3871165> text box in nested table 
        disappears when you click on it (3452) (Safari PSOFT: US 
        EDU PS8: Lead List searches)
    
        Table cells that are in an overlap of a rowspan and a colspan
        were not always being repainted correctly. This is because our
        previous implementation had no way for a cell to keep track of
        both its rowspan and its colspan. This patch maintains the old
        way of dealing with rowspan and introduces CellStruct for dealing
        with colspan. CellStruct is a structure that contains a 
        RenderTableCell and a boolean value that is true if the cell is in
        a colspan. 

        * khtml/rendering/render_table.cpp:
        (RenderTable::splitColumn): The section grid now returns a CellStruct.
        (RenderTable::appendColumn): Same as above, and cellAt() also returns
                a CellStruct and needs to be set appropriately.
        (RenderTable::cellAbove): cellAt() now returns a CellStruct. 
        (RenderTable::cellBelow): Same.
        (RenderTable::cellLeft): Same.
        (RenderTable::cellRight): Same.
        (RenderTableSection::ensureRows): Create empty CellStruct to fill the
                grid. 
        (RenderTableSection::addCell): cellAt() now returns a CellStruct. This 
                is also where the change in behavior is to fix 
                the bug. 
        (RenderTableSection::setCellWidths): cellAt() now returns a CellStruct.
        (RenderTableSection::calcRowHeight): Same.
        (RenderTableSection::layoutRows): Same.
        (RenderTableSection::paint): Same.
        (RenderTableSection::dump): Same.
        * khtml/rendering/render_table.h:
        (khtml::RenderTableSection::cellAt): Same.
        * khtml/rendering/table_layout.cpp:
        (AutoTableLayout::recalcColumn): Same.
        (AutoTableLayout::calcEffectiveWidth): Removed reference to 
                (RenderTableCell *)-1 because that is now 
                removed, and a cell will never be in a colspan
                in this function anyway. 
        (AutoTableLayout::insertSpanCell): Same.

2005-11-17  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-11-15  Adele Peterson  <adele@apple.com>

        Reviewed by Darin.

        - fix for <rdar://problem/4341948> REGRESSION(TOT/GLENDALE): Safari won't tab between input/textarea elements if a select element is present

        * kwq/KWQComboBox.mm: (-[KWQPopUpButton canBecomeKeyView]): removed check for tabsToAllControls() since we now always allow tabbing to select elements
        * kwq/KWQListBox.mm: (-[KWQTableView canBecomeKeyView]): ditto.

2005-11-15  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-11-15  Vicki Murley  <vicki@apple.com>

        Reviewed by Tim O.
 
        Improve this loop.  We'd get an infinite loop in the old code if we came across a part with no renderer, such as a frame whose src is an image.

        * kwq/WebCoreBridge.mm:
        (-[WebCoreBridge elementAtPoint:]):

2005-11-15  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-11-13  Vicki Murley  <vicki@apple.com>

        Reviewed by Maciej.

        Fixed <rdar://problem/4316201> REGRESSION: cursor and text in status bar is not updated when mousing over links in a frame (5509)

        * kwq/KWQKHTMLPart.mm:
        (KWQKHTMLPart::passSubframeEventToSubframe): add a case to handle NSMouseMoved, to fix the problem with the hand cursor
        (KWQKHTMLPart::mouseMoved): return if we're already sending an event to the subview
        * kwq/WebCoreBridge.mm:
        (-[WebCoreBridge elementAtPoint:]): if we're over a frame, return the element within the frame, to fix the problem with
        status bar text

2005-11-15  Timothy Hatcher  <timothy@apple.com>

        Applied fix for the Safari-1-3-branch

    2005-11-14  Adele Peterson  <adele@apple.com>

        Reviewed by Maciej and Darin.

        - fix for <rdar://problem/4233938> calling focus on contentEditable block elements should scroll them into view
        - fix for <rdar://problem/3624946> No 'blur' method defined on editable non-form DOM objects

        Added
        * fast/dom/focus-contenteditable.html
        * fast/dom/blur-contenteditable.html

        * khtml/ecma/kjs_dom.cpp: Added ElementFocus and ElementBlur to DOMElementProtoTable
        (KJS::DOMElementProtoFunc::callAsFunction): Added cases for ElementFocus and ElementBlur
        * khtml/ecma/kjs_dom.h: (KJS::DOMElement::): Added ElementFocus and ElementBlur to enum
        * khtml/html/html_elementimpl.cpp:
        (HTMLElementImpl::parseMappedAttribute): Added case for onblur.
        * khtml/xml/dom_elementimpl.cpp:
        (ElementImpl::focus): If the element isFocusable, calls setFocusNode to give element focus.
        (ElementImpl::blur): If the element is focused, calls setFocusNode to take away focus.
        * khtml/xml/dom_elementimpl.h: Added focus and blur functions
        * khtml/xml/dom_docimpl.cpp:
        (DocumentImpl::setFocusNode): If we're trying to take focus away from a node, then we should clear the selection before we fire events.
        If we don't, then efforts to focus the cursor during the event can reset focus on the old node.
        (DocumentImpl::clearSelectionIfNeeded): Added function since we need to clear the selection at multiple points.
        * khtml/xml/dom_docimpl.h: Added clearSelectionIfNeeded.
        * kwq/DOMExtensions.h: Added Obj-C bindings for focus and blur.
        * kwq/DOM.mm:
        (-[DOMElement focus]):
        (-[DOMElement blur]):

2005-11-14  Timothy Hatcher  <timothy@apple.com>

        Applied fix for the Safari-1-3-branch

    2005-11-10  Adele Peterson  <adele@apple.com>

        Reviewed by Maciej.

        Fixed <rdar://problem/4228997> selecting a new radio button does not automatically clear the previous selected (outside <form> element)

        Moved the radio button checking code to the document, since we shouldn't need a form to keep track of grouped radio buttons.

        Added 
        * fast/forms/radio_checked.html

        * khtml/xml/dom_docimpl.h: Added m_selectedRadioButtons (now a two level hash table to account for forms and group names),
        radioButtonChecked, checkedRadioButtonForGroup, and removeRadioButtonGroup
        * khtml/xml/dom_docimpl.cpp:
        (DocumentImpl::DocumentImpl): initialize m_selectedRadioButtons
        (DocumentImpl::~DocumentImpl): delete m_selectedRadioButtons, and any of the inner hashtables if necessary
        (DocumentImpl::radioButtonChecked): moved from HTMLFormElementImpl.
        (DocumentImpl::checkedRadioButtonForGroup): ditto.
        (DocumentImpl::removeRadioButtonGroup): ditto.
        * khtml/html/html_formimpl.cpp: 
        (DOM::HTMLFormElementImpl::HTMLFormElementImpl): removed initialization of m_selectedRadioButtons.
        (DOM::HTMLFormElementImpl::~HTMLFormElementImpl): removed deletion of m_selectedRadioButtons.
        (DOM::HTMLFormElementImpl::removeFormElement): now calls document's radio button functions
        (DOM::HTMLInputElementImpl::isKeyboardFocusable): ditto.
        (DOM::HTMLInputElementImpl::setInputType): ditto.
        (DOM::HTMLInputElementImpl::parseMappedAttribute): ditto.
        (DOM::HTMLInputElementImpl::setChecked): ditto.
        (DOM::HTMLInputElementImpl::preDispatchEventHandler): ditto.
        * khtml/html/html_formimpl.h: removed m_selectedRadioButtons, radioButtonChecked, checkedRadioButtonForGroup, and removeRadioButtonGroup

2005-11-12  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-07-29  Geoffrey Garen  <ggaren@apple.com>
        
        Fixed:
        <rdar://problem/3461547> can't use document.writeln() on windows opened via window.open("about:blank") in same function
        <rdar://problem/3725977> A_WINDOW.document.write() content overwritten when first parameter to window.open is provided
        <rdar://problem/4101498> SAP: window.write in same call chain as window.open fails to write if URL parameter is provided
        <rdar://problem/4179028> document.write in same function as window.open fails to write new content (4056)
        http://bugzilla.opendarwin.org/show_bug.cgi?id=4056 document.write in same function as window.open fails to write new content

        Reviewed by darin.

        Test cases added:
        * manual-tests/resources/write-after-open-popup.html: Added.

        * khtml/khtml_part.cpp:
        (KHTMLPart::didExplicitOpen): now cancels any pending redirection

2005-11-12  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-09-19  Beth Dakin  <bdakin@apple.com>

        Reviewed by Hyatt

        Test cases added: fast/table/overflowHidden.html

        Fixed <rdar://problem/3885711> (4047) CSS: Content displays incorrectly in tables with TD style set overflow:hidden
        Table cells render correctly with overflow:hidden, :auto, and :scroll specified. Cells now have a layer when overflow is specified.

        * khtml/css/cssstyleselector.cpp: Make sure table cells do not honor position:relative
        (khtml::CSSStyleSelector::adjustRenderStyle):
        * khtml/rendering/render_block.cpp: Add borderTopExtra() and borderBottomExtra() to various calculations of table cell height so that scroll bars render properly.
        (khtml::RenderBlock::isPointInScrollbar):
        (khtml::RenderBlock::nodeAtPoint):
        * khtml/rendering/render_box.cpp: Allow table cells to have overflow, and add borderTopExtra() and borderBottomExtra() to calculation of the clip rect.
        (RenderBox::setStyle):
        (RenderBox::getOverflowClipRect):
        * khtml/rendering/render_box.h: Removed definitions of borderTopExtra() and borderBottomExtra() so that they occur at the RenderObject level now.
        * khtml/rendering/render_layer.cpp: Layers must also take borderTopExtra() and borderBottomExtra() into account.
        (khtml::RenderLayer::updateLayerPosition):
        (khtml::RenderLayer::paintLayer):
        (khtml::RenderLayer::hitTestLayer):
        * khtml/rendering/render_object.cpp: Use m_overflowClip instead of hasOverflowClip() for consistency.
        (RenderObject::requiresLayer):
        * khtml/rendering/render_object.h: Add definitions of borderTopExtra() and borderBottomExtra() to RenderObject level.
        (khtml::RenderObject::borderTopExtra):
        (khtml::RenderObject::borderBottomExtra):
        * khtml/rendering/render_table.cpp: Allow table cells to have a layer if overflow is specified.
        (RenderTableSection::paint):
        (RenderTableCell::requiresLayer):
        (RenderTableCell::paint):
        (RenderTableCell::paintBoxDecorations):
        * layout-tests/fast/table/029-expected.txt: This layout test now paints a layer because it specifies overflow:hidden
        * layout-tests/fast/table/overflowHidden-expected.txt: Added.
        * layout-tests/fast/table/overflowHidden.html: Added.

2005-11-12  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-11-11  Eric Seidel  <eseidel@apple.com>

        Reviewed by mjs.

        Unfortunately both the Render and DOM trees will actually preform
        the load on <embed> <object> and <iframe> tags depending on the
        circumstances.  The <iframe> code path was missing a recursion
        check in the render tree.  I fixed that.  And improved the
        recursion checking for all tags.
        <rdar://problem/4187169> High CPU usage/hang occurs with Safari after loading cbsnews.com (also at cbs.com)

        * khtml/rendering/render_frames.cpp:
        (isURLAllowed): added, to prevent recursive loops
        (mapClassIdToServiceType): added, to simplify code
        (RenderPartObject::updateWidget): updated, to use above functions.

2005-11-11  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-11-03  Adele Peterson  <adele@apple.com>

        Reviewed by Hyatt.

        Clean up of layer scrolling code.  Now we can clearly define what to do if a rectangle is fully visible, partially visible, or hidden.
        This also fixes a bug with the previous implementation where nested layers/frames would get passed a rect that was too large.

        Added fast/overflow/scrollRevealButton.html

        * khtml/rendering/render_layer.h: (khtml::RenderLayer::): 
        Added ScrollBehavior enum, ScrollAlignment struct, and ScrollAlignment static members
        to describe specific scrolling behaviors depending on how visible the rectangle is.
        In the future, we can add other statics to easily describe desired behaviors.
        * khtml/rendering/render_layer.cpp:
        (khtml::): initialize ScrollAlignment static members: 
        alignCenterIfNeeded, alignToEdgeIfNeeded, alignCenterAlways, alignTopAlways, alignBottomAlways
        (khtml::RenderLayer::scrollRectToVisible):
        alignCenterIfNeeded is the default behavior for both directions.
        Pass the original rect (adjusted if scrolling has occurred) when recursively calling this function.
        (khtml::RenderLayer::getRectToExpose): Adjusted for new ScrollAlignment parameters.
        * khtml/khtml_part.cpp:
        (KHTMLPart::gotoAnchor): Use the node's rect to determine where to scroll.  
        We used to just use the origin, but this helps us match other browsers better.
        (KHTMLPart::setActiveNode): Removed scrolling code, since this is now also done in setFocusNode
        * khtml/xml/dom_elementimpl.cpp: (ElementImpl::scrollIntoView): Use new ScrollAlignment values to describe scrolling behavior.
        * kwq/KWQKHTMLPart.mm:
        (KWQKHTMLPart::nextKeyViewInFrame): Removed scrolling code, since this is now also done in setFocusNode
        (KWQKHTMLPart::centerSelectionInVisibleArea): Use new ScrollAlignment values to describe scrolling behavior.
        * kwq/WebCoreBridge.mm: (-[WebCoreBridge ensureSelectionVisible]): ditto.
        * kwq/KWQScrollView.h: Removed ensureRectVisible, since we no longer use this.
        * kwq/KWQScrollView.mm: ditto.
        * khtml/khtmlview.cpp:
        (KHTMLView::doAutoScroll): Removed unnecessary nil checks for enclosingLayer
        (KHTMLView::focusNextPrevNode): ditto.

2005-11-11  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-10-27  David Harrison  <harrison@apple.com>
 
        Reviewed by Justin Garcia and Dave Hyatt.

        <rdar://problem/4134884> crash trying to forward msg - khtml::RenderBlock::addChildToFlow

        Problem was that onunload events were being fired while in the middle of trying to detach, which resulted in updateDocumentsRendering re-attaching the previously detached nodes.  Similar problem with load events while attaching.
        
        Solved by eliminating load and unload for object nodes, pre-sending unload before detach, and sending dom mutation and load events after attaching.
        
        Also, added asserts to catch this problem more easily in the future.
        
        Added test:
        * fast/events/event-targets.html
        Make sure that load and unload events do not fire on certain objects.
        
        * khtml/ecma/kjs_html.cpp:
        (KJS::Image::notifyFinished):
        Use constant string for "load" event name.
        * khtml/ecma/xmlhttprequest.cpp:
        (KJS::XMLHttpRequest::changeState):
        Use constant strings for "load" and "readystatechange" event names.
        * khtml/html/html_baseimpl.cpp:
        (HTMLFrameElementImpl::close):
        (HTMLFrameElementImpl::willRemove):
        (HTMLFrameElementImpl::detach):
        Add willRemove() function.
        * khtml/html/html_baseimpl.h:
        Add willRemove() function.
        * khtml/html/html_objectimpl.cpp:
        (DOM::HTMLObjectElementImpl::attach):
        (DOM::HTMLObjectElementImpl::detach):
        Stop needlessly sending load and unload events for OBJECT elements.
        * khtml/xml/dom2_traversalimpl.cpp:
        (DOM::NodeIteratorImpl::notifyBeforeNodeRemoval):
        Rename local variable from willRemove to removedNode for clarity.
        * khtml/xml/dom_docimpl.cpp:
        (DocumentImpl::DocumentImpl):
        (DocumentImpl::forbidEventDispatch):
        (DocumentImpl::allowEventDispatch):
        (DocumentImpl::eventDispatchForbidden):
        (DocumentImpl::createEvent):
        Add mechanism to prevent event dispatch.
        * khtml/xml/dom_docimpl.h:
        * khtml/xml/dom_nodeimpl.cpp:
        (DOM::NodeImpl::dispatchEvent):
        (DOM::NodeImpl::dispatchGenericEvent):
        (DOM::NodeImpl::dispatchHTMLEvent):
        (DOM::NodeImpl::dispatchWindowEvent):
        (DOM::NodeImpl::dispatchMouseEvent):
        (DOM::NodeImpl::dispatchSimulatedMouseEvent):
        (DOM::NodeImpl::dispatchUIEvent):
        (DOM::NodeImpl::dispatchSubtreeModifiedEvent):
        (DOM::NodeImpl::dispatchKeyEvent):
        (DOM::NodeImpl::dispatchWheelEvent):
        (DOM::NodeImpl::willRemove):
        (DOM::ContainerNodeImpl::insertBefore):
        (DOM::ContainerNodeImpl::replaceChild):
        (DOM::ContainerNodeImpl::willRemove):
        (DOM::ContainerNodeImpl::willRemoveChild):
        (DOM::ContainerNodeImpl::removeChild):
        (DOM::ContainerNodeImpl::removeChildren):
        (DOM::ContainerNodeImpl::appendChild):
        (DOM::ContainerNodeImpl::addChild):
        (DOM::ContainerNodeImpl::dispatchChildInsertedEvents):
        (DOM::ContainerNodeImpl::dispatchChildRemovalEvents):
        Prevent event dispatch during DOM node removals and additions.
        * khtml/xml/dom_nodeimpl.h:

2005-11-11  Timothy Hatcher  <timothy@apple.com>

        Fix for http://bugzilla.opendarwin.org/show_bug.cgi?id=4170
        and <rdar://problem/3849434> SLIDER: Article length goes from a 
        subject line, back to the whole article, when decreasing (4170)

        Patch by Ricci Adams
        Reviewed by Dave Hyatt

        * khtml/rendering/render_flexbox.cpp:
         (RenderFlexibleBox::layoutVerticalBox): clamp the value

2005-11-11  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-11-11  Beth Dakin  <bdakin@apple.com>

        Reviewed by Hyatt.

        Fix for <rdar://problem/3952698> Function buttons do not display 
        properly with Telia Webmail (3488). 
    
        Replaced elements with a percentage width used to be given a minimum
        width of 0. This caused buttons etc with width:100% to overlap when
        they shouldn't. Textareas and text boxes are still given a minimum
        width of 0 because they need slightly different behavior to match 
        WinIE. I filed <rdar://problem/4339518> to track this remaining problem.

        * khtml/rendering/render_form.cpp:
        (RenderLineEdit::calcMinMaxWidth): Still give text fields a m_minWidth of 0.
        (RenderTextArea::calcMinMaxWidth): And textareas.
        * khtml/rendering/render_replaced.cpp:
        (RenderReplaced::calcMinMaxWidth): Remove the check for width().isPercent()
        when making m_minWidth 0.

2005-11-10  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-06-22  Kevin Ballard  <kevin@sb.org>

        Reviewed by Darin.

        Test cases added:
        * crlf.html
        * text-selection.html
        Both of these are attached to the bug separately from the patch,
        because I can't cvs add.
        Reviewer: feel free to remove this comment and tweak the test cases added
        lines to reflect wherever you place these cases in the hierarchy

        - Fixes bug <http://bugzilla.opendarwin.org/show_bug.cgi?id=3401>.
          Also fixes issue where setting text of a textarea in code and then
          retrieving it would leave the \r\n sequences in the text, despite
          the textarea translating to \n in all other cases.

        * khtml/ecma/kjs_html.cpp:
        (KJS::getInputSelectionStart):
        (KJS::getInputSelectionEnd):
        (KJS::KJS::HTMLElement::getValueProperty):
        (KJS::KJS::HTMLElement::hasProperty):
        (KJS::KJS::HTMLElementFunction::tryCall):
        (KJS::HTMLElement::putValue):
        * khtml/ecma/kjs_html.h:
        (KJS::HTMLElement::):
        * khtml/html/html_formimpl.cpp:
        (DOM::HTMLInputElementImpl::canHaveSelection):
        (DOM::HTMLInputElementImpl::selectionStart):
        (DOM::HTMLInputElementImpl::selectionEnd):
        (DOM::HTMLInputElementImpl::setSelectionStart):
        (DOM::HTMLInputElementImpl::setSelectionEnd):
        (DOM::HTMLInputElementImpl::setSelectionRange):
        (DOM::HTMLInputElementImpl::setValue):
        (DOM::HTMLTextAreaElementImpl::selectionStart):
        (DOM::HTMLTextAreaElementImpl::selectionEnd):
        (DOM::HTMLTextAreaElementImpl::setSelectionStart):
        (DOM::HTMLTextAreaElementImpl::setSelectionEnd):
        (DOM::HTMLTextAreaElementImpl::setSelectionRange):
        (DOM::HTMLTextAreaElementImpl::setValue):
        * khtml/html/html_formimpl.h:
        * khtml/rendering/render_form.cpp:
        (RenderLineEdit::selectionStart):
        (RenderLineEdit::selectionEnd):
        (RenderLineEdit::setSelectionStart):
        (RenderLineEdit::setSelectionEnd):
        (RenderLineEdit::setSelectionRange):
        (RenderTextArea::selectionStart):
        (RenderTextArea::selectionEnd):
        (RenderTextArea::setSelectionStart):
        (RenderTextArea::setSelectionEnd):
        (RenderTextArea::select):
        (RenderTextArea::setSelectionRange):
        * khtml/rendering/render_form.h:
        * kwq/KWQLineEdit.h:
        * kwq/KWQLineEdit.mm:
        (QLineEdit::setCursorPosition):
        (QLineEdit::cursorPosition):
        (QLineEdit::selectAll):
        (QLineEdit::selectionStart):
        (QLineEdit::selectedText):
        (QLineEdit::setSelection):
        * kwq/KWQTextArea.h:
        * kwq/KWQTextArea.mm:
        (-[KWQTextArea setSelectedRange:]):
        (-[KWQTextArea selectedRange]):
        (-[KWQTextArea getCursorPositionAsIndex:inParagraph:]):
        (RangeOfParagraph):
        * kwq/KWQTextEdit.h:
        * kwq/KWQTextEdit.mm:
        (QTextEdit::getCursorPosition):
        (QTextEdit::selectionStart):
        (QTextEdit::selectionEnd):
        (QTextEdit::setSelectionStart):
        (QTextEdit::setSelectionEnd):
        (QTextEdit::selectAll):
        (QTextEdit::setSelectionRange):
        * kwq/KWQTextField.h:
        * kwq/KWQTextField.mm:
        (-[KWQTextFieldController selectedRange]):
        (-[KWQTextFieldController setSelectedRange:]):

2005-11-10  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-11-10  Adele Peterson  <adele@apple.com>

        Reviewed by Maciej.

        - fixed <rdar://problem/4327363> GAP: tabs not treated as whitespace in option element

        * khtml/rendering/render_form.cpp: (RenderSelect::updateFromElement): call simplifyWhiteSpace() on the itemText or label to collapse whitespace.

2005-11-10  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-09-21  Vicki Murley  <vicki@apple.com>
   
        Changes by Romain Brestac, reviewed by Darin.

        - fix http://bugzilla.opendarwin.org/show_bug.cgi?id=3418
        (unicode characters not preserved after a xslt transformation)

        * khtml/misc/loader.cpp:
        (CachedXSLStyleSheet::CachedXSLStyleSheet):
        (CachedXSLStyleSheet::data):
        * khtml/misc/loader.h:
        * khtml/xsl/xslt_processorimpl.cpp:
        (DOM::XSLTProcessorImpl::addToResult):
        (DOM::XSLTProcessorImpl::documentFromXMLDocPtr):

2005-11-10  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-10-03  Beth Dakin  <bdakin@apple.com>

        Reviewed by Darin.

        Fix for <rdar://problem/4235722> line-height style settings not reflected in 
        textarea. 

        * khtml/rendering/render_form.cpp:
        (RenderTextArea::setStyle): Make setStyle call new setLineHeight function and
        computer correct line height using RenderObject::lineHeight
        * kwq/KWQTextArea.h:
        * kwq/KWQTextArea.mm:
        (-[KWQTextAreaTextView setFont:]): setFont updates lineHeight if necessary.
        (-[KWQTextAreaTextView setLineHeight:]): sets the line height
        (-[NSTextView _KWQ_updateTypingAttributes:forLineHeight:fontHeight:]): Applies the 
        new line height to the paragraph style attributes. 
        * kwq/KWQTextEdit.h:
        * kwq/KWQTextEdit.mm:
        (QTextEdit::setLineHeight): calls setLineHeight in KWQTextAreaTextView

2005-11-10  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-11-10  Eric Seidel  <eseidel@apple.com>

        Reviewed by ggaren.

        * khtml/ecma/kjs_html.cpp:
        (KJS::Image::getValueProperty): resolve relative urls in Image::src
        http://bugzilla.opendarwin.org/show_bug.cgi?id=3473
        <rdar://problem/3787988> Preloaded Image objects .src field is not a fully resolved path (3473)

2005-11-10  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-11-09  Dave Hyatt  <hyatt@apple.com>
    
        Fixed <rdar://problem/4237617> selects should be in the tab order
        in all keyboard modes
        
        Reviewed by Vicki
        
        * kwq/KWQComboBox.mm:
        (QComboBox::focusPolicy):
        * kwq/KWQListBox.mm:
        (QListBox::focusPolicy):
    
2005-11-10  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-10-10  Geoffrey Garen  <ggaren@apple.com>

        - Fixed <rdar://problem/4245682> Regression: CrashTracer: 923 crashes 
          in Safari at com.apple.WebCore: KJS::Window::clear + 132

        Reviewed by mjs.

        No test case because this crash isn't reliably reproducible.

        * khtml/ecma/kjs_window.cpp:
        (KJS::Window::Window): Initialize m_returnValueSlot to 0, so that we
        know not to write to it until it's explicitly set to a valid address.

2005-11-09  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-09-21  Vicki Murley  <vicki@apple.com>

        Reviewed by Darin.
 
        - fix these bugs
        <rdar://problem/3579812> HTMLTableElement.insertRow(n) inserts row at the beginning of the table (4043)
        <rdar://problem/3711188> HTMLTableElement.insertRow() doesn't respect passed index

        * khtml/html/html_tableimpl.cpp:
        (DOM::HTMLTableElementImpl::insertRow): 
        if the index is the same as the number of rows in the section, we should append
        
        Update test results for /fast/dynamic/013.html. In the old version the the rows 
        and cells were children of the first table section, a tfoot.  They are now children 
        of the second table section, a tbody.  Our rendering now matches Gecko and Win IE 
        (according to yusufg on #webkit, comparing with 013-expected.png) for this case.

        * layout-tests/fast/dynamic/013-expected.checksum:
        * layout-tests/fast/dynamic/013-expected.png:
        * layout-tests/fast/dynamic/013-expected.txt:

        Test cases added: 

        * layout-tests/fast/dynamic/014-expected.checksum: Added.
        * layout-tests/fast/dynamic/014-expected.png: Added.
        * layout-tests/fast/dynamic/014-expected.txt: Added.
        * layout-tests/fast/dynamic/014.html: Added.
        * layout-tests/fast/dynamic/015-expected.checksum: Added.
        * layout-tests/fast/dynamic/015-expected.png: Added.
        * layout-tests/fast/dynamic/015-expected.txt: Added.
        * layout-tests/fast/dynamic/015.html: Added.

2005-11-09  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-09-16  Tim Omernick  <tomernick@apple.com>

        Reviewed by Dave Hyatt.  Test case reviewed by Vicki Murley.

        <rdar://problem/3572507> Flash in div with display:none style will not redraw when style changed to display:block (3479)

        Test cases added:
        * manual-tests/show-hide-object.html: Added.
        * manual-tests/resources/spinbox.swf: Added.

        * khtml/html/html_objectimpl.cpp:
        (DOM::HTMLObjectElementImpl::detach):
        Set needWidgetUpdate to true so that the widget is updated on the next attach().

=== WebCore-315.10.1 ===

2005-11-03  Timothy Hatcher  <timothy@apple.com>

        Merged fix from TOT to Safari-1-3-branch

    2005-10-06  Beth Dakin  <bdakin@apple.com>

        Reviewed by Vicki.

        Fix for <rdar://problem/4145535> Crash in khtml::RenderBlock::addOverhangingFloats 
        with simple HTML test file.

        * khtml/rendering/render_block.cpp: Added nil check
        (khtml::RenderBlock::addOverhangingFloats):
